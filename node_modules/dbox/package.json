{
  "name": "dbox",
  "description": "NodeJS SDK for the Dropbox API",
  "version": "0.5.6",
  "author": {
    "name": "Brock Whitten",
    "email": "brock@sintaxi.com"
  },
  "contributors": [
    {
      "name": "Brock Whitten",
      "email": "brock@sintaxi.com"
    },
    {
      "name": "Anton Podviaznikov",
      "email": "podviaznikov@gmail.com"
    },
    {
      "name": "Tom Gallacher",
      "email": "tomgallacher23@gmail.com"
    },
    {
      "name": "Emmanuel Boudrant",
      "email": "emmanuel.boudrant@gmail.com"
    },
    {
      "name": "Danny Amey",
      "email": "git@dannyamey.com"
    },
    {
      "name": "Michiel DeJong",
      "email": "michiel@unhosted.org"
    },
    {
      "name": "Julien Cayzac",
      "email": "julien.cayzac@gmail.com"
    },
    {
      "name": "Aleksandar Kolundzija",
      "email": "a@ak.rs"
    },
    {
      "name": "Carl Sverre",
      "email": "accounts@carlsverre.com"
    },
    {
      "name": "Leonardo D. Schlossmacher",
      "email": "e@leods92.com"
    },
    {
      "name": "Sam Nguyen",
      "email": "samxnguyen@gmail.com"
    },
    {
      "name": "Marak Squires",
      "email": "marak.squires@gmail.com"
    },
    {
      "name": "Paul Ledbetter",
      "email": "mledbetter.paul@gmail.com"
    },
    {
      "name": "James Allen",
      "email": "jamesallen0108@gmail.com"
    },
    {
      "name": "Jesper Lindstr√∏m Nielsen",
      "email": "me@jstroem.com"
    },
    {
      "name": "Rob Ellis",
      "email": "rob@chloi.io"
    },
    {
      "name": "Jeremiah Condon",
      "email": "jeremy@grit-design.com"
    },
    {
      "name": "John Titus",
      "email": "john.titus@gmail.com"
    },
    {
      "name": "Ben Buckman",
      "email": "ben.buckman@docusign.com"
    }
  ],
  "keywords": [
    "dropbox",
    "sdk",
    "s3"
  ],
  "main": "./dbox.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha -t 30000 test/all.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sintaxi/node-dbox.git"
  },
  "dependencies": {
    "request": "2.9.153"
  },
  "devDependencies": {
    "mocha": "1.0.3",
    "should": "0.6.3",
    "prompt": "0.1.12"
  },
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/sintaxi/node-dbox/master/README.md"
    }
  ],
  "readme": "# dbox \n\n### Important Notice - dbox API has changed between `v0.4.x` and `v0.5.x`. It is highly recommended you upgrade.\n\n## Installation\n\nI always recommend you bundle your dependencies with your application. To do\nthis, create a `package.json` file in the root of your project with the minimum\ninformation...\n\n    {\n      \"name\": \"yourapplication\",\n      \"version\": \"0.1.0\",\n      \"dependencies\": {\n        \"dbox\": \"0.5.6\"\n      }\n    }\n\nThen run the following command using npm...\n\n    npm install\n\nOR, if you just want to start playing with the library run...\n\n    npm install dbox\n\n## API Overview\n\n`dbox` methods (where dbox is set from requiring the dbox library)...\n\n    app                 <-- creates application object\n    \n`app` methods (where app is created from the above `app` call)...\n\n    requesttoken        <-- creates request token for getting request token and authorization url\n    accesstoken         <-- creates access token for creating a client object\n    client              <-- creates client object with access to users dropbox account\n    \n`client` methods (where client is created from the above `client` call)...\n\n    account             <-- view account\n    mkdir               <-- make directory\n    mv                  <-- move file or directory\n    cp                  <-- copy file or directory\n    rm                  <-- remove file or directory\n    put                 <-- upload file\n    get                 <-- download file\n    metadata            <-- get file or directory information\n    revisions           <-- get revision history\n    restore             <-- restore previous version\n    search              <-- search directory\n    shares              <-- create link to view file\n    media               <-- create streamable link to file\n    thumbnails          <-- get thumbnail of file\n    copyref             <-- create copy reference to file\n    delta               <-- get list of delta entries\n    stream              <-- creates readable stream\n    readdir             <-- recursively reads directory\n\n## How to Use\n\nCreating a functional `dbox` client is a four step process.\n\n1. create an `app` using application credentials provided by dropbox\n2. obtain request token to use for generation access token\n3. have user visit authorization URL to grant access to your application\n4. create a client using access token that was generated earlier\n\n### Step 1\n\n    var dbox  = require(\"dbox\")\n    var app   = dbox.app({ \"app_key\": \"umdez34678ck01fx\", \"app_secret\": \"tjm89017sci88o6\" })\n    \n### Step 2\n\nAuthorization is a three step process.\n\na) Get a request token...\n\n    app.requesttoken(function(status, request_token){\n      console.log(request_token)\n    })\n\nb) User must visit the url to grant authorization to the client...\n\n    https://www.dropbox.com/1/oauth/authorize?oauth_token=#{ request_token.oauth_token }\n\nc) Generate our access token with the request token...\n\n    app.accesstoken(request_token, function(status, access_token){\n      console.log(access_token)\n    })\n\n### Step 3\n\n    var client = app.client(access_token)\n\nNow we have a client that gives us access to all the api functionality.\n\n## Client Methods\n\n### account([options,] callback)\n\nReturns account information.\n\n    client.account(function(status, reply){\n      console.log(reply)\n    })\n    \noutput of `reply` returns...\n\n    { \n      uid: 123456789,\n      display_name: 'Brock Whitten',\n      email: 'brock@sintaxi.com',\n      country: 'CA',\n      referral_link: 'https://www.dropbox.com/referrals/NTc0NzYwNDc5',\n      quota_info: { \n        shared: 1100727791, \n        quota: 2415919104, \n        normal: 226168599\n      }\n    }\n\n### mkdir(path, [options,] callback)\n\nCreates directory at specified location.\n\n    client.mkdir(\"foo\", options, function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    {\n      \"size\": \"0 bytes\",\n      \"rev\": \"1f477dd351f\",\n      \"thumb_exists\": false,\n      \"bytes\": 0,\n      \"modified\": \"Wed, 10 Aug 2011 18:21:30 +0000\",\n      \"path\": \"/foo\",\n      \"is_dir\": true,\n      \"icon\": \"folder\",\n      \"root\": \"sandbox\",\n      \"revision\": 5023410\n    }\n\n### mv(from\\_path, to\\_path, [options,] callback)\n\nMoves file or directory to a new location.\n\n    client.mv(\"foo\", \"bar\", function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    {\n      \"size\": \"0 bytes\",\n      \"rev\": \"irt77dd3728\",\n      \"thumb_exists\": false,\n      \"bytes\": 0,\n      \"modified\": \"Wed, 10 Aug 2011 18:21:30 +0000\",\n      \"path\": \"/bar\",\n      \"is_dir\": true,\n      \"icon\": \"folder\",\n      \"root\": \"sandbox\",\n      \"revision\": 5023410\n    }\n\n### cp(from\\_path, to\\_path, [options,] callback)\n\nCopies a file or directory to a new location.\n\n    client.cp(\"bar\", \"baz\", function(status, reply){\n      console.log(reply)\n    })\n    \n    {\n      \"size\": \"0 bytes\",\n      \"rev\": \"irt77dd3728\",\n      \"thumb_exists\": false,\n      \"bytes\": 0,\n      \"modified\": \"Wed, 10 Aug 2011 18:21:30 +0000\",\n      \"path\": \"/baz\",\n      \"is_dir\": true,\n      \"icon\": \"folder\",\n      \"root\": \"sandbox\",\n      \"revision\": 5023410\n    }\n\n### rm(path, [options,] callback)\n\nRemoves a file or directory.\n\n    client.rm(\"README.txt\", function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    {\n      \"size\": \"0 bytes\",\n      \"is_deleted\": true,\n      \"bytes\": 0,\n      \"thumb_exists\": false,\n      \"rev\": \"1f33043551f\",\n      \"modified\": \"Wed, 10 Aug 2011 18:21:30 +0000\",\n      \"path\": \"/README.txt\",\n      \"is_dir\": false,\n      \"icon\": \"page_white_text\",\n      \"root\": \"sandbox\",\n      \"mime_type\": \"text/plain\",\n      \"revision\": 492341\n    }\n    \n### put(path, data, [options,] callback)\n\nCreates or modifies a file with given data. `data` may be a string or a buffer.\n\n    client.put(\"foo/hello.txt\", \"here is some text\", function(status, reply){\n      console.log(reply)\n    })\n    \noutput of `reply` returns...\n    \n    {\n      \"size\": \"225.4KB\",\n      \"rev\": \"35e97029684fe\",\n      \"thumb_exists\": false,\n      \"bytes\": 230783,\n      \"modified\": \"Tue, 19 Jul 2011 21:55:38 +0000\",\n      \"path\": \"/foo/hello.txt\",\n      \"is_dir\": false,\n      \"icon\": \"page_white_text\",\n      \"root\": \"sandbox\",\n      \"mime_type\": \"text/plain\",\n      \"revision\": 220823\n    }\n\n### get(path, [options,] callback)\n\nPulls down file (available as a buffer) with its metadata.\n\n    client.get(\"foo/hello.txt\", function(status, reply, metadata){\n      console.log(reply.toString(), metadata)\n    })\n\noutput of `reply.toString()` returns...\n   \n    here is some text\n\noutput of `metadata` returns...\n\n    {\n      \"revision\": 11,\n      \"rev\": \"b07a93bb3\",\n      \"thumb_exists\": false,\n      \"bytes\": 17,\n      \"modified\": \"Sat, 12 May 2012 19:31:08 +0000\",\n      \"client_mtime\": \"Sat, 12 May 2012 19:30:52 +0000\",\n      \"path\": \"/foo/hello.txt\",\n      \"is_dir\": false,\n      \"icon\": \"page_white_text\",\n       \"root\": \"app_folder\",\n       \"mime_type\": \"text/plain\",\n      \"size\": \"17 bytes\"\n    }\n\n### metadata(path, [options,] callback)\n\nRetrieves file or directory  metadata.\n\n    // available options...\n    var options = {\n      file_limit         : 10000,              // optional\n      hash               : ...,                // optional\n      list               : true,               // optional\n      include_deleted    : false,              // optional\n      rev                : 7,                  // optional\n      locale:            : \"en\",               // optional\n      root:              : \"sandbox\"           // optional\n    }\n\n    client.metadata(\"Getting_Started.pdf\", options, function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n   \n    {\n      \"size\": \"225.4KB\",\n      \"rev\": \"35e97029684fe\",\n      \"thumb_exists\": false,\n      \"bytes\": 230783,\n      \"modified\": \"Tue, 19 Jul 2011 21:55:38 +0000\",\n      \"path\": \"/Getting_Started.pdf\",\n      \"is_dir\": false,\n      \"icon\": \"page_white_acrobat\",\n      \"root\": \"sandbox\",\n      \"mime_type\": \"application/pdf\",\n      \"revision\": 220823\n    }\n\n### revisions(path, [options,] callback)\n\nObtains metadata for the previous revisions of a file.\n\n    // available options...\n    var options = {\n      rev_limit          : 10,                 // optional\n      locale:            : \"en\"                // optional\n    }\n\n    client.revisions(\"foo/hello.txt\", options, function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n  \n    [\n      {\n        \"is_deleted\": true,\n        \"revision\": 4,\n        \"rev\": \"40000000d\",\n        \"thumb_exists\": false,\n        \"bytes\": 0,\n        \"modified\": \"Wed, 20 Jul 2011 22:41:09 +0000\",\n        \"path\": \"foo/hello.txt\",\n        \"is_dir\": false,\n        \"icon\": \"page_white\",\n        \"root\": \"sandbox\",\n        \"mime_type\": \"text/plain\",\n        \"size\": \"0 bytes\"\n      },\n      {\n        \"revision\": 1,\n        \"rev\": \"10000000d\",\n        \"thumb_exists\": false,\n        \"bytes\": 3,\n        \"modified\": \"Wed, 20 Jul 2011 22:40:43 +0000\",\n        \"path\": \"foo/hello.txt\",\n        \"is_dir\": false,\n        \"icon\": \"page_white\",\n        \"root\": \"sandbox\",\n        \"mime_type\": \"text/plain\",\n        \"size\": \"3 bytes\"\n      }\n    ]\n\n### restore(path, rev, [options,] callback)\n\nRestores a file path to a previous revision.\n\n    client.revisions(\"foo/hello.txt\", 4, function(status, reply){\n      console.log(reply)\n    })\n    \noutput of `reply` returns...\n\n    {\n      \"is_deleted\": true,\n      \"revision\": 4,\n      \"rev\": \"40000000d\",\n      \"thumb_exists\": false,\n      \"bytes\": 0,\n      \"modified\": \"Wed, 20 Jul 2011 22:41:09 +0000\",\n      \"path\": \"/foo/hello.txt\",\n      \"is_dir\": false,\n      \"icon\": \"page_white\",\n      \"root\": \"sandbox\",\n      \"mime_type\": \"text/plain\",\n      \"size\": \"0 bytes\"\n    }\n    \n### search(path, query, [options,] callback)\n\nReturns metadata for all files and directories that match the search query.\n\n    var options = {\n      file_limit         : 10000,              // optional\n      include_deleted    : false,              // optional\n      locale:            : \"en\"                // optional\n    }\n\n    client.search(\"foo\", \"hello\", options, function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    [\n      {\n        \"size\": \"0 bytes\",\n        \"rev\": \"35c1f029684fe\",\n        \"thumb_exists\": false,\n        \"bytes\": 0,\n        \"modified\": \"Mon, 18 Jul 2011 20:13:43 +0000\",\n        \"path\": \"/foo/hello.txt\",\n        \"is_dir\": false,\n        \"icon\": \"page_white_text\",\n        \"root\": \"sandbox\",\n        \"mime_type\": \"text/plain\",\n        \"revision\": 220191\n      }\n    ]\n\n### shares(path, [options,] callback)\n\nCreates and/or returns a shareable link to a file or directory.\n\n    client.shares(\"foo/hello.txt\", options, function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    {\n      \"url\": \"http://db.tt/APqhX1\",\n      \"expires\": \"Sat, 17 Aug 2011 02:34:33 +0000\"\n    }\n\n### media(path, [options,] callback)\n\nCreates and/or returns a shareable link to a file or directory. This endpoint\nis similar to /shares but content is streamable.\n\n    client.media(\"foo/hello.txt\", function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    {\n      \"url\": \"http://www.dropbox.com/s/m/a2mbDa2\",\n      \"expires\": \"Thu, 16 Sep 2011 01:01:25 +0000\"\n    }\n\n### thumbnails(path, [options,] callback)\n\nGets a thumbnail for an image.\n\n    client.thumbnails(\"foo/koala.jpg\", function(status, reply, metadata){\n      console.log(metadata);\n\n      require('fs').writeFile('koala_small.jpg', reply, function () {\n        console.log('Thumbnail saved!');\n      });\n    })\n\n\noutput of `reply` is a buffer which should be sent to a new image file.\n\noutput of `metadata` returns...\n\n    {\n      \"revision\": 13,\n      \"rev\": \"d07a93bb3\",\n      \"thumb_exists\": true,\n      \"bytes\": 780831,\n      \"modified\": \"Sat, 12 May 2012 19:48:59 +0000\",\n      \"client_mtime\": \"Tue, 14 Jul 2009 05:32:31 +0000\",\n      \"path\": \"/foo/koala.jpg\",\n      \"is_dir\": false,\n      \"icon\": \"page_white_picture\",\n      \"root\": \"app_folder\",\n      \"mime_type\": \"image/jpeg\",\n      \"size\": \"762.5 KB\"\n    } \n\n### cpref(path, [options,] callback)\n\n    client.cpref(\"song.mp3\", function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    {\n      expires: 'Thu, 03 Apr 2042 22:33:49 +0000',\n      copy_ref: 'ALGf72Jrc3A0ZTh5MzA4Mg'\n    }\n    \n### delta([options,] callback)\n\n    client.delta(function(status, reply){\n      console.log(reply)\n    })\n\noutput of `reply` returns...\n\n    {\n      reset: true,\n      cursor: 'AkMCE0f1CsMA7tobhXR1vwEZaM1KjFqTNjxgWITCks6oeJxjKBL2Z2Co0WOp_rSOgYHxJwMQAAAyKwSY',\n      has_more: false,\n      entries: [\n        [ '/foo', [Object] ],\n        [ '/bar', [Object] ]\n      ]\n    }\n    \n### readdir(path, callback)\n\nGet an array of paths for all files and directories found in the given path. The method calls recursively to dropbox so it can take a long time to evaluate.\n    \n    client.readdir('/', function(status, reply){\n        console.log(reply)\n    })\n\nOutput of `readdir` returns...\n    \n    ['/','/foo','/bar']\n\n## License\n\nCopyright 2011 Chloi Inc.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "dbox@0.5.6",
  "dist": {
    "shasum": "96e221b8b359a451c7db8b103cb011e6ae60e98b"
  },
  "_from": "dbox@*"
}
